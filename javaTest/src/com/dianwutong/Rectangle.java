package com.dianwutong;
class Rectangle extends Graph {
  int width;
  int height;
  public Rectangle(){
    super(); //
  }
  public Rectangle(String name){
    super(name);
  }
  public Rectangle(int width,int height,String name){
    this(name);
  }
  public void show(){
    super.show();
    System.out.println("at the same time I'm a Rectangle");
  }
}
//java中的继承是单继承的，也就是说一个子类只能继承一个父类，子类会继承父类中的除构造函数以外的所有非private成员方法，以及所有非private成员变量

//构造函数的调用
//生成子类对象或者实例时，Java默认地首先调用父类的不带参数的构造方法，接下来调用子类的构造方法，生成子类对象
//this表示对当前对象的引用，而super表示对父类对象的引用，在子类的构造函数中，一般第一条语句是super();表示调用父类构造函数，也可以调用父类有参数的构造函数，如果一个类的构造函数的第一语句既不是this()也不是super()时，就会隐含地调用super()
//方法覆盖
//如果子类中有和父类中非private的同名方法，且返回类型和参数表也完全相同，就会覆盖从父类继承来的方法，当两个方法形成重写关系时，可以在子类中通过super关键字调用父类被重写的方法

//抽象类
//在面向对象的领域一切都是对象，所有的对象都是通过类来描述的。如果我们要定义的一个类没有足够的信息来描述一个具体的对象，还需要其他的具体类来支持，这个时候我们可以考虑使用抽象类，在类的定义前面增加abstract关键字，就表明一个类是抽象类
//抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样，由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用

//abstract关键字同样可以用来声明抽象方法，抽象方法只包含一个方法名，而没有方法体，抽象方法没有定义，方法名后面直接跟一个括号public abstract double area(); 声明抽象方法会带来以下两个结果
//如果一个类包含抽象方法，那么该类必须是抽象类
//任何子类必须重写父类的抽象方法，否则就必须声明自身为抽象类


//接口
//与抽象类类似的一个重要概念是接口，接口是一组抽象方法的集合。接口中定义的方法没有方法体，它们以分号结束。 接口也和抽象类一样，无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内描述的所有方法，否则就必须声明为抽象类，编写接口和编写类的方法大体上是类似的，一个接口可以有多个方法，代码保存在以接口命名且以.java结尾的文件中，接口使用interface关键字进行定义
//比如我们定义一个Animal接口
// interface Animal{
//    void eat();
//    void sleep();
// }
//这个接口包含了两个抽象方法:eat() 和 sleep()。接口中的方法都是外部可访问的，因此我们不需要用public修饰
//接口中也可以声明变量，一般都是final和static类型的，要以常量来初始化，实现接口的类不能改变接口中的变量
//接口访问权限有两种:public权限和默认权限，如果接口的访问权限是public的话，所有的方法和变量都是public，默认权限则同一个包内的类可以访问。
//一个接口可以继承另一个接口，和类之间的继承方式比较相似，接口的继承使用extends关键字，子接口继承父接口的方法


//接口实现
//类使用implements关键字实现接口，在类声明中，implements关键字放在class声明后面，接口支持多重继承，即一个类可以同时实现多个接口
//class Cat implements Animal {
//    public void eat() {
//        System.out.println("eat");
//    }
//    public void sleep() {
//      System.out.println("sleep");
//    }
//
// }
//类需要对接口中的每一个方法都给出实现
//我们可以使用接口类型来声明一个变量，那么这个变量可以引用到一个实现该接口的对象
//比如: Animal cat = new Cat();


//java IO
//Java IO 是一套java用来读写数据(输入和输出)的API。大部分程序都要处理一些输入，并由输入产生一些输出，Java为此提供了java.io包，主要涉及文件，网络数据流，内存缓冲等的输入输出。
//Java IO中的一个核心概念是流，从外部(包括磁盘文件、键盘、网络套接字)读入到内存中的数据序列称为输入流，从内存写入到外部设备的数据序列称为输出流
//流中的数据既可以是未加工的原始二进制数据，也可以是经一定编码处理后符合某种格式规定的特定数据，因此java中的流分为两种
//1.字节流：数据流中最小的数据单元是字节，多用于读取或书写二进制数据
//2.字符流: 数据流中最小的数据单元是字符，java中的字符是Unicode编码，一个字符占用两个字节

//在最底层，所有的输入/输出都是字节形式的，基于字符的流只为处理字符提供方便有效的方法

//字节流的最顶层是两个抽象类:InputStream和OutputStream，其他关于处理字节的类都是它们的子类，这些子类对不同的外设进行处理，例如磁盘文件，网络连接。甚至是内存缓冲区
