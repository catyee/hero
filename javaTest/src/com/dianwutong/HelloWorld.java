package com.dianwutong;

import java.util.Scanner;
//java提供了很多方便我们编程的类，通常称之为类库(lib),也称之为应用编程接口
//不仅仅是java平台提供的类需要import，任何一个package中的类，如果需要访问另外一个package中的类，就需要import
//import java.util.*；表示将java.util包下的所有类都引入进来

public class HelloWorld {
    public static void main(String[] args){
        Post post = new Post();//创建博客对象
        //我们需要声明对象的类型为Post，并进行命名，代码中命名为post，然后我们使用new 关键字创建post对象
        //post是一个局部变量，局部变量和成员变量不同，它不属于某个对象，是一个临时变量，当方法执行结束，变量就不再起作用了，一个方法中声明的变量都属于局部变量


        post.title = "catyee's blog";
        post.content = "test my blog";
        post.print();

        Integer in = new Integer(100);
        int m = in.intValue();
        //System.out.print(m);
        String s = "123";
        int n = Integer.parseInt(s);
        String s2 = Integer.toString(n);


        int[] anArray;
        anArray = new int[10]; //初始化一个长度为10的整型数组
        int[] ary = {1,2,3,4};
        System.out.println(ary.length);

        //获取控制台输入
        //为了获取控制台输入，我们需要创建一个Scanner对象

        Scanner scanner = new Scanner(System.in);
        int number = scanner.nextInt();
        System.out.println(number);
        scanner.close();
        //Scanner对象可以读取用户在命令行输入的各种数据类型
        //比如:通过nexInt()方法读取整数 其他基本数据类型类似
        //也可以读取用户输入的字符串 通过next()方法读取一个字符串 通过nextLine()读取用户输入回车键之前的所有输入信息 以String返回

    }
    public int add(int a,int b){ //int声明了返回类型
        return  a + b;
    }
}

//java是一种面向对象的语言，从上面这个程序中我们可以看到
// java中的主要代码都会位于一个类中，类是通过class关键字来定义的
//java是一种对大小写敏感的语言，class不能写为Class 命名为HelloWorld的类和命名为Helloworld的类是不一样的
//程序的文件名称必须和类的名称完全相同，java代码的文件都以类名加.java后缀进行命名
//比如HelloWorld类的代码都是保存在HelloWorld.java文件中

//public static void main(String[] args) 是一个方法 这是java程序的入口
//任何java程序的代码都是从这个方法开始执行的

//System.out.println()是一个方法的调用 向控制台输出传入的参数
//System.out.print()和System.out.println()的区别，后者会在最后加一个换行符号


//上面代码中的public class 和static都是java语言中的关键字 关键字也称之为保留字，java语言保留这些单词来作为特殊目的，它们构成了java语言语法的基本元素
//比如class关键字表示一个类，java编译器看到这个单词就知道这是一个类的定义


//标识符

//java程序中的各个组成部分都需要名字。类名，变量名，方法名，方法参数名都被称为标识符，标识符是我们自己命名的

//所有的标识符都应该以字母,$,或者_开始
//首字母之后可以是字母数字$,_的组合
//java语言自带的关键字不能用作标识符
//标识符对大小写敏感


//*** 一般类名以大写字母开头，方法名一般以小写字母开头

//单行注释 //          多行注释 /*内容*/      文档注释/**内容*/

//public是一个修饰符，表示外部可以访问这个类，Post的状态和行为就分别体现在成员变量和成员方法上

/**
 * void print(){
 *     System.out.print(title);
 * }
 * 此方法没有返回值，没有返回值的情况，我们使用void表示
 */


//包
//在开发过程中，类的数量会越来越多，我们可以通过包(packager)来组织类，包的命名一般以一个组织的域名的反写开头，比如电务通的域名是dianwutong.com,那么电务通代码的开发，包名一般就会以com.dianwutong开头
//在一个大型项目中，我们将会有成百上千的类，放在不同的包中，不仅更易于查找，也能防止命名冲突
//在程序设计语言中，变量是在内存中动态存储值的地方 java要求在使用一个变量前必须声明它的类型
//声明一个变量就是向计算机申请内存来存储值，JVM会根据变量的类型为变量分配相应的存储空间，因此，通过定义不同类型的变量，可以在内存中储存整数，小数或者字符串等值

//数据类型是一门程序语言的基本构成元素，java语言提供了八种基本类型，其中包括六种数字类型（四种整数型，两种浮点型），一种字符类型，还有一种布尔类型

//byte
//byte数据类型是8位有符号整数，有符号指的是有正数和负数之分
//最小值是-128(-2^7)
//最大值是127(2^7-1)
//默认值是0
//byte类型用在大型数组中节约空间，主要代替整数，因为byte变量占用的空间只有int类型的四分之一

//short类型
//short数据类型是16位有符号整数
//最小值是-32768(-2^15)
//最大值是32767(2^15 - 1)
//默认值是0
//short类型也可以像byte类型那样节省空间，一个short变量是int变量所占空间的二分之一


//int 类型
//int类型是32位有符号整数
//最小值是(-2^31)
//最大值是(2^31-1)
//默认值是0

//整型变量默认是int类型


//long类型是64位有符号整数 这种类型主要使用在需要比较大整数的系统上

//float类型是单精度32位的浮点数
//float在存储大型浮点数组的时候可节省内存空间 默认值是0.0f 浮点数不能用来表示精确地的值，如货币

//double类型是双精度64位的浮点数 浮点数的默认类型是double 默认值是0.0d double类型同样不能表示精确的值，如货币

//boolean类型表示一位的信息 只有两个取值:true和false

//char类型是一个单一的16位Unicode字符
//最小值是'\u0000'(0)
//最大值是'\uffff'(65535)
//默认值是'\u0000'(0)
//char数据类型可以储存任何字符


//占用内存空间小的类型可以自动转换成占用内存空间大的类型

//将long b 赋值给a int需要进行强制转换 a = int(b);


//以上8种基本类型都不是类，java提供了对应的类，称之为包装类，包装类可以认为是将基本类型转换为一个引用类型


//数组 一旦被创建后它的长度是固定的

//编写java程序 简而言之就是两件事 定义类 使用类

//定义类的工作包括 定义类的属性 定义类的方法 定义类的构造函数
//使用类的工作包括 基于类创建对象(即访问类的构造器) 访问类的属性 访问类的方法

//一般情况下 都是一个类一个.java文件
//如果一个.java文件里有多个类，只可能有一个public的类，而且文件名必须和public类同名
//如果文件里所有类都不是public的，那么文件和任意一个类同名即可

//定义成员变量，方法时，可以用private,protected和public修饰来控制外部的可见性
//private:表示任何其他类不能直接访问该成员变量，只有该类自身可以访问
//protected:表示只有该类自身及其子类可以访问该成员变量
//public:表示任何类都可以直接访问该成员变量
//没有修饰:表示同一个包的类可以访问该成员变量

//成员变量的类型可以是基本类型，也可以是引用类型(如数组，字符串)

//方法可以有返回类型和传入参数


//方法的返回值和参数构成了方法的签名
//方法名相同，但是参数不同的现象，称之为方法重载 两个方法仅仅是返回类型不一样不能构成方法重载，会引发编译错误

//定义构造器
// 默认构造器 构造器用于创建对象。构造器类似于普通方法，但是有两个特殊的地方: 方法名称必须和类名相同，不允许定义返回类型
//如果你没有定义任何构造器，则编译器会自动帮你生成一个构造器，称之为默认构造器
//默认构造器不包含任何参数，会自动调用其父类的无参数构造器，因此如果父类没有无参数的构造器，则会发生编译错误。


//java的专业术语
//JDK: 编写java程序的程序员使用的软件
//JRE 运行java程序的用户使用的软件

//Server JRE 服务端使用的java运行环境
//SDK 软件开发工具包
//DAO 数据访问接口。数据访问，顾名思义就是与数据库打交道
//MVC 模型-视图-控制器，一种软件设计典范，用于组织代码用一种业务逻辑和数据显示分离的方法


//一个java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作


//继承
//在java中，一个类可以由其他类派生，如果你要创建一个类，而且已经存在一个类具有你需要的属性和方法，那么你可以将新创建的类继承该类。利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码，被继承的类称为超类，派生类称为子类

//接口
//在java中，接口可理解为对象间相互通信的协议，接口在继承中扮演着很重要的角色。接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类


//源文件声明规则
//当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则

// 一个源文件只能有一个public类，一个源文件可以有多个非public类，源文件的名称应该和public类的类名保持一致。如果一个类定义在某个包中，那么package语句应该在源文件的首行，如果源文件包含import语句，那么应该放在packgae语句和类定义之间，如果没有package语句，那么import语句应该在源文件中最前面，import语句和package语句对源文件中定义的所有类都有效，在同意源文件中，不能给不同的类不同的包声明

//静态变量与静态方法
//当为一个类创建实例时，每个不同的实例的成员变量都有自己特定的值
//有时我们希望定义一个类成员，使其作为该类的公共成员，所有实例都共享该成员变量，此时需要使用static关键字


